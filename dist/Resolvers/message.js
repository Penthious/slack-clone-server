'use strict';Object.defineProperty(exports,'__esModule',{value:!0});var _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},_graphqlSubscriptions=require('graphql-subscriptions'),_permissions=require('../permissions'),_pubsub=require('../pubsub'),_pubsub2=_interopRequireDefault(_pubsub),_config=require('../config'),_config2=_interopRequireDefault(_config);function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _objectWithoutProperties(a,b){var c={};for(var d in a)0<=b.indexOf(d)||Object.prototype.hasOwnProperty.call(a,d)&&(c[d]=a[d]);return c}const NEW_CHANNEL_MESSAGE='NEW_CHANNEL_MESSAGE';exports.default={Subscription:{newChannelMessage:{subscribe:_permissions.requiresTeamAccess.createResolver((0,_graphqlSubscriptions.withFilter)(()=>_pubsub2.default.asyncIterator('NEW_CHANNEL_MESSAGE'),(a,b)=>a.channelId===b.channelId))}},Message:{url:a=>a.url?`http://${_config2.default.BASE_URL}:${_config2.default.PORT}/${a.url}`:a.url,user:({user:a,userId:b},c,{models:d})=>a?a:d.User.findOne({where:{id:b}},{raw:!0})},Query:{messages:_permissions.requiresAuth.createResolver(async(a,{channelId:b,cursor:c},{models:d,user:e})=>{const f=await d.Channel.findOne({raw:!0,where:{id:b}});if(!f.public){const a=await d.PCMember.findOne({raw:!0,where:{channelId:b,userId:e.id}});if(!a)throw new Error('Not Authorized')}const g={order:[['created_at','DESC']],where:{channelId:b},limit:35};return c&&(g.where.id={[d.op.lt]:c}),d.Message.findAll(g,{raw:!0})})},Mutation:{createMessage:_permissions.requiresAuth.createResolver(async(a,b,{models:c,user:d})=>{let{file:e}=b,f=_objectWithoutProperties(b,['file']);try{const a=f;e&&(a.filetype=e.type,a.url=e.path);const b=await c.Message.create(_extends({},f,{userId:d.id})),g=await c.User.findOne({where:{id:d.id}});return console.log(g),_pubsub2.default.publish('NEW_CHANNEL_MESSAGE',{channelId:f.channelId,newChannelMessage:_extends({},b.dataValues,{user:g.dataValues})}),!0}catch(a){return console.log(a),!1}})}};