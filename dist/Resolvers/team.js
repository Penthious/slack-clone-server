'use strict';Object.defineProperty(exports,'__esModule',{value:!0});var _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},_formatErrors=require('../formatErrors'),_formatErrors2=_interopRequireDefault(_formatErrors),_permissions=require('../permissions');function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}exports.default={Query:{getTeamMembers:_permissions.requiresAuth.createResolver(async(a,{teamId:b},{models:c})=>c.sequelize.query('select * from users as u join members as m on m.user_id = u.id where m.team_id = ?',{replacements:[b],model:c.User,raw:!0}))},Mutation:{addTeamMember:_permissions.requiresAuth.createResolver(async(a,{email:b,teamId:c},{models:d,user:e})=>{try{const a=d.Member.findOne({where:{teamId:c,userId:e.id}},{raw:!0}),f=d.User.findOne({where:{email:b}},{raw:!0}),[g,h]=await Promise.all([a,f]);return g.admin?h?(await d.Member.create({userId:h.id,teamId:c}),{ok:!0}):{ok:!1,errors:[{path:'email',message:'Could not find user with this email'}]}:{ok:!1,errors:[{path:'email',message:'You cannot add members to the team'}]}}catch(a){return console.log(a),{ok:!1,errors:(0,_formatErrors2.default)(a,d)}}}),createTeam:_permissions.requiresAuth.createResolver(async(a,b,{models:c,user:d})=>{try{const a=await c.sequelize.transaction(async a=>{const e=await c.Team.create(_extends({},b),{transaction:a});return await c.Channel.create({name:'general',public:!0,teamId:e.id},{transaction:a}),await c.Member.create({teamId:e.id,userId:d.id,admin:!0},{transaction:a}),e});return{ok:!0,team:a}}catch(a){return console.log(a),{ok:!1,errors:(0,_formatErrors2.default)(a,c)}}})},Team:{channels:({id:a},b,{channelLoader:c})=>c.load(a),directMessageMembers:({id:a},b,{models:c,user:d})=>c.sequelize.query('select distinct on (u.id) u.id, u.username from users as u join direct_messages as dm on (u.id = dm.sender_id) or (u.id = dm.receiver_id) where (:currentUserId = dm.sender_id or :currentUserId = dm.receiver_id) and dm.team_id = :teamId',{replacements:{currentUserId:d.id,teamId:a},model:c.User,raw:!0})}};