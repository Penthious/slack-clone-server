'use strict';Object.defineProperty(exports,'__esModule',{value:!0});var _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},_formatErrors=require('../formatErrors'),_formatErrors2=_interopRequireDefault(_formatErrors),_permissions=require('../permissions');function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}exports.default={Mutation:{getOrCreateChannel:_permissions.requiresAuth.createResolver(async(a,{members:b,teamId:c},{models:d,user:e})=>{const f=await d.Member.findOne({where:{teamId:c,userId:e.id}},{raw:!0});if(!f)throw new Error('Not Authorized');const g=[...b,e.id],[h,i]=await d.sequelize.query(`
    select c.id, c.name
    from channels as c, pcmembers pc
    where pc.channel_id = c.id and c.dm = true and c.public = false and c.team_id = ${c}
    group by c.id, c.name
    having array_agg(pc.user_id) @>
    Array[${g.join(',')}] and count(pc.user_id) = ${g.length};
    `,{raw:!0});if(console.log(h,'data'),console.log(i,'result'),h.length)return console.log('we are error'),_extends({},h[0],{ok:!1});const j=await d.User.findAll({raw:!0,where:{id:{[d.sequelize.Op.in]:b}}});console.log(j,'users');const k=j.map(a=>a.username).join(', ');console.log(k,' name');const l=await d.sequelize.transaction(async a=>{const b=await d.Channel.create({name:k,public:!1,dm:!0,teamId:c},{transaction:a});console.log(b,'channel');const e=b.dataValues.id;console.log(e,'id');const f=g.map(a=>({userId:a,channelId:e}));return console.log(f,'members'),await d.PCMember.bulkCreate(f,{transaction:a}),e});return console.log(l,'channelId is here',k),{ok:!0,name:k,id:l}}),createChannel:_permissions.requiresAuth.createResolver(async(a,b,{models:c,user:d})=>{try{const a=await c.Member.findOne({where:{teamId:b.teamId,userId:d.id}},{raw:!0});if(!a.admin)return{ok:!1,errors:[{path:'name',message:'You have to be the owner of the team to create channels'}]};const e=await c.sequelize.transaction(async a=>{const e=await c.Channel.create(b,{transaction:a});if(!b.public){const f=b.members.filter(a=>a!==d.id);f.push(d.id),await c.PCMember.bulkCreate(f.map(a=>({userId:a,channelId:e.dataValues.id})),{transaction:a})}return e});return{ok:!0,channel:e}}catch(a){return console.log(a),{ok:!1,errors:(0,_formatErrors2.default)(a,c)}}})}};