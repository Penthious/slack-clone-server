'use strict';Object.defineProperty(exports,'__esModule',{value:!0});const channelBatcher=exports.channelBatcher=async(a,b,c)=>{const d=await b.sequelize.query(`
    select distinct on (id) *
    from channels as c
    left outer join pcmembers as pc
    on c.id = pc.channel_id
    where c.team_id in (:teamIds) and (c.public = true or pc.user_id = :userId);
    `,{replacements:{teamIds:a,userId:c.id},model:b.Channel,raw:!0}),e={};return d.forEach(a=>{e[a.team_id]?e[a.team_id].push(a):e[a.team_id]=[a]}),a.map(a=>e[a])},directMessageBatcher=exports.directMessageBatcher=async(a,b,c)=>{const d=await b.sequelize.query('select distinct on (u.id) u.id, u.username from users as u join direct_messages as dm on (u.id = dm.sender_id) or (u.id = dm.receiver_id) where (:currentUserId = dm.sender_id or :currentUserId = dm.receiver_id) and dm.team_id = :teamId',{replacements:{currentUserId:c.id,teamId:a[0]},model:b.User,raw:!0}),e={};return d.forEach(a=>{e[a.team_id]?e[a.team_id].push(a):e[a.team_id]=[a]}),a.map(a=>e[a]).filter(Boolean)},memberBatcher=exports.memberBatcher=()=>{},messageBatcher=exports.messageBatcher=()=>{},pcmemberBatcher=exports.pcmemberBatcher=()=>{},teamBatcher=exports.teamBatcher=()=>{},meBatcher=exports.meBatcher=(a,b)=>{b.User.findAll({where:{id:{[b.op.in]:a}}})};